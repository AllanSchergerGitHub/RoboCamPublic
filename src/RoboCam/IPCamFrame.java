package RoboCam;

import Utility.UiLine;

import javax.swing.event.ChangeEvent;
import java.awt.*;

public class IPCamFrame extends javax.swing.JFrame {

    public IPCamFrame() {
        initComponents();
        mIPCamPanel.addConnectionListener(new IPCamPanel.ConnectionListener() {
            @Override
            public void onConnect() {
                lblIPConStatus.setText("Connected");
                lblIPConStatus.setBackground(Color.GREEN);
                lblIPConStatus.repaint();
            }

            @Override
            public void onDisconnect() {
                lblIPConStatus.setText("Disconnected");
                lblIPConStatus.setBackground(Color.RED);
                lblIPConStatus.repaint();
            }

            @Override
            public void onImageUpdate() {
            }
        });

        mIPCamPanel.addLineListener(new IPCamPanel.LineListener() {
            @Override
            public void onSelect(UiLine.Line line) {
                mBtnColorChooser.setColor(line.getColor());
                mSpnLineThickness.setValue(line.getThickness());
            }
        });

        mBtnColorChooser.addColorChangeListener((Color newColor) -> {
            mIPCamPanel.setLineColor(newColor);
        });

        mSpnLineThickness.addChangeListener((ChangeEvent ce) -> {
            mIPCamPanel.setLineThickness((int) mSpnLineThickness.getValue());
        });
    }

    public IPCamPanel getIPCamPanel() {
        return mIPCamPanel;
    }

    private String getXYString(Point point) {
        return String.format("(x, y) = (%d, %d)", point.x, point.y);
    }

    public void setUrl(String url) {
        mIPCamPanel.setUrlAddrress(url);
    }

    public UiLine.Collection getUiLineCollection() {
        return mIPCamPanel.getUiLineCollection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        try {
            java.awt.GridBagConstraints gridBagConstraints;

            mToolBar = new javax.swing.JPanel();
            mLblLineColor = new javax.swing.JLabel();
            mBtnColorChooser = new Utility.ColorChooserButton();
            mLblLineThickness = new javax.swing.JLabel();
            mSpnLineThickness = new javax.swing.JSpinner();
            mIPCamPanel = new RoboCam.IPCamPanel();
            jlbCamXYCoord = new javax.swing.JLabel();
            lblIPConStatus = new javax.swing.JLabel();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("IPCamera");
            getContentPane().setLayout(new java.awt.GridBagLayout());

            mToolBar.setLayout(new java.awt.GridBagLayout());

            mLblLineColor.setText("Line Color: ");
            mToolBar.add(mLblLineColor, new java.awt.GridBagConstraints());
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
            mToolBar.add(mBtnColorChooser, gridBagConstraints);

            mLblLineThickness.setText("Line Thickness: ");
            mToolBar.add(mLblLineThickness, new java.awt.GridBagConstraints());

            mSpnLineThickness.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
            mSpnLineThickness.setMinimumSize(new java.awt.Dimension(60, 28));
            mSpnLineThickness.setPreferredSize(new java.awt.Dimension(60, 28));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
            gridBagConstraints.weightx = 1.0;
            mToolBar.add(mSpnLineThickness, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            getContentPane().add(mToolBar, gridBagConstraints);

            mIPCamPanel.setPreferredSize(new java.awt.Dimension(800, 600));
            mIPCamPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseMoved(java.awt.event.MouseEvent evt) {
                    mIPCamPanelMouseMoved(evt);
                }
            });

            javax.swing.GroupLayout mIPCamPanelLayout = new javax.swing.GroupLayout(mIPCamPanel);
            mIPCamPanel.setLayout(mIPCamPanelLayout);
            mIPCamPanelLayout.setHorizontalGroup(
                    mIPCamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGap(0, 539, Short.MAX_VALUE)
            );
            mIPCamPanelLayout.setVerticalGroup(
                    mIPCamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGap(0, 270, Short.MAX_VALUE)
            );

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(mIPCamPanel, gridBagConstraints);

            jlbCamXYCoord.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jlbCamXYCoord.setText("(x, y) = (0, 0)");
            jlbCamXYCoord.setAlignmentX(0.5F);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            getContentPane().add(jlbCamXYCoord, gridBagConstraints);

            lblIPConStatus.setBackground(new java.awt.Color(178, 115, 52));
            lblIPConStatus.setText("CamStatus");
            lblIPConStatus.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
            lblIPConStatus.setOpaque(true);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            getContentPane().add(lblIPConStatus, gridBagConstraints);

            pack();
        } catch(Exception e) {
            // catch for ClassCastException
        }

    }// </editor-fold>//GEN-END:initComponents

    private void mIPCamPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mIPCamPanelMouseMoved
        Point mousePos = mIPCamPanel.getImageXYFromLocal(evt.getX(), evt.getY());
        jlbCamXYCoord.setText(getXYString(mousePos));
    }//GEN-LAST:event_mIPCamPanelMouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IPCamFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IPCamFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IPCamFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IPCamFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IPCamFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jlbCamXYCoord;
    private javax.swing.JLabel lblIPConStatus;
    private Utility.ColorChooserButton mBtnColorChooser;
    private RoboCam.IPCamPanel mIPCamPanel;
    private javax.swing.JLabel mLblLineColor;
    private javax.swing.JLabel mLblLineThickness;
    private javax.swing.JSpinner mSpnLineThickness;
    private javax.swing.JPanel mToolBar;
    // End of variables declaration//GEN-END:variables
}
