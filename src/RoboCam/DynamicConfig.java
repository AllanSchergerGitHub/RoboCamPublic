package RoboCam;

import java.awt.Component;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import Utility.UiLine;
import Utility.Serializer;

/**
 * This class will read and store those
 * configurations which are generated by
 * user during operations of the application.
 *
 * The file will overwritten by the class.
 */
public class DynamicConfig {
    static final String CONFIG_FILE_NAME = ".dynamic-config-robocam.ini";
    private final File mConfigFile;
    private Properties mProps;

    private final ComponentAdapter mComponentListener;
    private final UiLine.Collection.OnChangeListener mUiLineCollectionListener;
            
    private HashMap<Component, String> mComponentMaps = new HashMap<>();
    private HashMap<UiLine.Collection, String> mUiLineMaps= new HashMap<>();
    
    public DynamicConfig() {
        mConfigFile = Config.getConfigFile(CONFIG_FILE_NAME);
        System.out.println(mConfigFile.getAbsolutePath());
        mProps = new Properties();
        try {
            mProps.load(new FileInputStream(mConfigFile));
        } catch (FileNotFoundException ex) {
            ///Logger.getLogger(DynamicConfig.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            //Logger.getLogger(DynamicConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
        mComponentListener = new ComponentAdapter() {
            @Override
            public void componentMoved(ComponentEvent ce) {
                saveComponentPosition(ce.getComponent());
            }

            @Override
            public void componentResized(ComponentEvent ce) {
                
            }
        };
        
        mUiLineCollectionListener = (UiLine.Collection coll) -> {
            saveUiLineCollection(coll);
        };
    }
    
    public void addComponent(Component component) {
        String name = component.getName();
        System.out.println(name + " " + name);
        if (name != null) {
            mComponentMaps.put(component, name);
            loadComponentPosition(component);
            component.addComponentListener(mComponentListener);
        }
    }
    
    public void addUiCollection(String name, UiLine.Collection collection) {
        mUiLineMaps.put(collection, name);
        loadUiLineCollection(collection);
        collection.addOnChangeListener(this.mUiLineCollectionListener);
    }
    
    public void saveComponentPosition(Component component) {
        String name = mComponentMaps.get(component);
        if (name == null) return;
        mProps.setProperty(
            name,
            Serializer.getStringOf(component.getBounds())
        );
    }
    
    public void loadComponentPosition(Component component) {
        String name = mComponentMaps.get(component);
        if (name == null) return;
        String value = mProps.getProperty(name);
        if (value == null) {
            return;
        }
        Rectangle rectangle = Serializer.getRectangleFromString(value);
        if (component.getParent() != null) {
            Point basePoint = component.getParent().getLocationOnScreen();
            rectangle.x -= basePoint.x;
            rectangle.y -= basePoint.y;
        }
        component.setBounds(rectangle);
    }
    
    public void saveUiLineCollection(UiLine.Collection coll) {
        String name = mUiLineMaps.get(coll);
        if (coll.getStringValue() == null) return;
        if (name == null) return;
        mProps.setProperty(
            name,
            coll.getStringValue()
        );
        save();
    }
    
    public void loadUiLineCollection(UiLine.Collection coll) {
        String name = mUiLineMaps.get(coll);
        String value = mProps.getProperty(name);
        System.out.println(value);
        if (value != null) {
            coll.loadFromString(value);
        }
    }
    
    public void save() {
        try {
            mProps.store(new FileOutputStream(mConfigFile), null);
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(DynamicConfig.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            //Logger.getLogger(DynamicConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
